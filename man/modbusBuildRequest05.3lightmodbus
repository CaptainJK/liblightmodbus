.TH modbusBuildRequest 3lightmodbus "25 March 2017" "v1.3"
.SH NAME
.PP
\fBmodbusBuildRequest0102\fP, \fBmodbusBuildRequest01\fP, \fBmodbusBuildRequest02\fP, \fBmodbusBuildRequest0304\fP, \fBmodbusBuildRequest03\fP, \fBmodbusBuildRequest04\fP, \fBmodbusBuildRequest05\fP, \fBmodbusBuildRequest06\fP, \fBmodbusBuildRequest15\fP, \fBmodbusBuildRequest16\fP, \fBmodbusBuildRequest22\fP \- build request for slave device.
.SH SYNOPSIS
.PP
\fB\fC#include <lightmodbus/master.h>\fR
.PP
\fB\fC
    #define modbusBuildRequest01( status, address, index, count ) modbusBuildRequest0102( (status), 1, (address), (index), (count) )
    #define modbusBuildRequest02( status, address, index, count ) modbusBuildRequest0102( (status), 2, (address), (index), (count) )
    #define modbusBuildRequest03( status, address, index, count ) modbusBuildRequest0304( (status), 3, (address), (index), (count) )
    #define modbusBuildRequest04( status, address, index, count ) modbusBuildRequest0304( (status), 4, (address), (index), (count) )
    uint8_t modbusBuildRequest0102( ModbusMaster *status, uint8_t function, uint8_t address, uint16_t index, uint16_t count );
    uint8_t modbusBuildRequest0304( ModbusMaster *status, uint8_t function, uint8_t address, uint16_t index, uint16_t count );
    uint8_t modbusBuildRequest05( ModbusMaster *status, uint8_t address, uint16_t index, uint16_t value );
    uint8_t modbusBuildRequest06( ModbusMaster *status, uint8_t address, uint16_t index, uint16_t value );
    uint8_t modbusBuildRequest15( ModbusMaster *status, uint8_t address, uint16_t index, uint16_t count, uint8_t *values );
    uint8_t modbusBuildRequest16( ModbusMaster *status, uint8_t address, uint16_t index, uint16_t count, uint16_t *values );
    uint8_t modbusBuildRequest22( ModbusMaster *status, uint8_t address, uint16_t index, uint16_t andmask, uint16_t ormask );
\fR
.SH DESCRIPTION
.PP
The \fBmodbusBuildRequestXX\fP functions build request frames, which are later sent to the slave device.
Each routine returns an error code described in 
.BR lightmodbus (3lightmodbus).

On successful exit, the Modbus frame of \fIstatus.request.length\fP bytes length is written to \fIstatus.request.frame\fP buffer and additionally predicted slave's response length is written into \fIstatus.predictedResponseLength\fP\&. Otherwise the length is set to 0, meaning that something has gone wrong.
.PP
\fBmodbusBuildRequest01\fP, \fBmodbusBuildRequest02\fP, \fBmodbusBuildRequest03\fP and \fBmodbusBuildRequest04\fP are actually macros, later replaced with \fBmodbusBuildRequest0102\fP and \fBmodbusBuildRequest0304\fP calls \- see above declarations.
.PP
To be honest, these functions don't need any further explanations if you know what you are doing. A quick look at Wikipedia's Modbus protocol page should be enough to understand everything in here.
.SH SEE ALSO
.PP
.BR lightmodbus (3lightmodbus), 
.BR ModbusMaster (3lightmodbus)
.SH AUTHORS
.PP
Jacek Wieczorek (Jacajack) \- \[la]mrjjot@gmail.com\[ra]
